openapi: 3.0.1
info:
  title: Tickets API
  description: |
    티켓 관리 시스템을 위한 RESTful API입니다.
    이 API를 통해 티켓을 생성, 조회, 수정, 삭제하고 댓글을 관리할 수 있습니다.

    각 티켓은 고유 ID, 제목, 설명, 상태를 가지며 여러 댓글을 포함할 수 있습니다.
    티켓 상태는 open, closed 등으로 관리됩니다.
  version: 1.0.0
tags:
  - name: tickets api
paths:
  /tickets:
    get:
      summary: GET /tickets
      deprecated: false
      description: 티켓 목록 확인
      tags:
        - tickets api
      parameters: []
      responses:
        "200":
          description: 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  tickets:
                    type: array
                    description: 티켓 목록
                    items:
                      $ref: "#/components/schemas/Ticket"
              example:
                tickets:
                  - id: 01JQA8YHB2WQ5GTDWDKWK744B9
                    title: First Ticket
                    description: This is the first ticket.
                    status: open
                    comments:
                      - id: 01JQFRVCZ36PC7C3CDYWGGGVH2
                        content: This is the first comment.
                  - id: 01JQA8YHSK6NSD1QEEJPES8592
                    title: Slow load
                    description: Page takes long.
                    status: open
                    comments: []
                  - id: 01JQA8YJ8G5G5J6XTXJEB4RE13
                    title: Button broken
                    description: Click does nothing.
                    status: open
                    comments: []
          headers: {}
      security: []
    post:
      summary: POST /tickets
      deprecated: false
      description: 티켓 생성
      tags:
        - tickets api
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: 제목
                description:
                  type: string
                  description: 본문
              required:
                - title
                - description
            example:
              title: New Ticket
              description: This is a new ticket.
      responses:
        "201":
          description: 티켓 생성 성공
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ticket"
              example:
                id: 01JQX1FTS2KJFQRFEWVEM83QH2
                title: New Ticket
                description: This is a new ticket.
                status: open
                comments: []
          headers: {}
      security: []
  /tickets/{id}:
    get:
      summary: GET /tickets/:id
      deprecated: false
      description: 특정 티켓 확인
      tags:
        - tickets api
      parameters:
        - name: id
          in: path
          description: 티켓 ID
          required: true
          example: 01JQA8YHB2WQ5GTDWDKWK744B9
          schema:
            type: string
      responses:
        "200":
          description: 성공
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ticket"
              example:
                id: 01JQA8YHB2WQ5GTDWDKWK744B9
                title: Some Ticket
                description: This is a ticket.
                status: open
                comments: []
          headers: {}
      security: []
    patch:
      summary: PATCH /tickets/:id
      deprecated: false
      description: 티켓 수정
      tags:
        - tickets api
      parameters:
        - name: id
          in: path
          description: 티켓 ID
          required: true
          example: 01JQA8YHB2WQ5GTDWDKWK744B9
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: 티켓 상태
              required:
                - status
            example:
              status: closed
      responses:
        "200":
          description: 티켓 수정 성공
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ticket"
              example:
                id: 01JQA8YHB2WQ5GTDWDKWK744B9
                title: Some Ticket
                description: This is a ticket.
                status: closed
                comments: []
          headers: {}
      security: []
    delete:
      summary: DELETE /tickets/:id
      deprecated: false
      description: 티켓 삭제
      tags:
        - tickets api
      parameters:
        - name: id
          in: path
          description: 티켓 ID
          required: true
          example: 01JQX1FTS2KJFQRFEWVEM83QH2
          schema:
            type: string
      responses:
        "200":
          description: 티켓 삭제 성공
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ticket"
              example:
                id: 01JQX1FTS2KJFQRFEWVEM83QH2
                title: Some Ticket
                description: This is a ticket.
                status: closed
                comments: []
          headers: {}
        "404":
          description: 티켓을 찾을 수 없음
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                  - error
          headers: {}
      security: []
  /tickets/{ticketId}/comments:
    get:
      summary: GET /tickets/:ticketId/comments
      deprecated: false
      description: 댓글 목록
      tags:
        - tickets api
      parameters:
        - name: ticketId
          in: path
          description: 티켓 ID
          required: true
          example: 01JQFRSC1ZD0BD7J7CFC4Y4KXP
          schema:
            type: string
      responses:
        "200":
          description: 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Comment"
              example:
                - id: 01JQFRVCZ36PC7C3CDYWGGGVH2
                  content: This is the first comment.
          headers: {}
      security: []
    post:
      summary: POST /tickets/:ticketId/comments
      deprecated: false
      description: 댓글 생성
      tags:
        - tickets api
      parameters:
        - name: ticketId
          in: path
          description: 티켓 ID
          required: true
          example: 01JQFRSC1ZD0BD7J7CFC4Y4KXP
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  description: 댓글 본문
              required:
                - content
            example:
              content: This is the first comment.
      responses:
        "201":
          description: 댓글 생성 성공
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
              example:
                id: 01JQX26V9XH60Y98S7Z1J87EYR
                content: This is the first comment.
          headers: {}
      security: []
  /tickets/{ticketId}/comments/{id}:
    delete:
      summary: DELETE /tickets/:ticketId/comments/:id
      deprecated: false
      description: 댓글 삭제
      tags:
        - tickets api
      parameters:
        - name: ticketId
          in: path
          description: 티켓 ID
          required: true
          example: 01JQFRSC1ZD0BD7J7CFC4Y4KXP
          schema:
            type: string
        - name: id
          in: path
          description: 댓글 ID
          required: true
          example: 01JQX26V9XH60Y98S7Z1J87EYR
          schema:
            type: string
      responses:
        "200":
          description: 댓글 삭제 성공
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
              example:
                id: 01JQX26V9XH60Y98S7Z1J87EYR
                content: This is the first comment.
          headers: {}
      security: []
components:
  schemas:
    Comment:
      type: object
      properties:
        id:
          type: string
          description: 댓글 ID
        content:
          type: string
          description: 댓글 내용

    Ticket:
      type: object
      properties:
        id:
          type: string
          description: 티켓 ID
        title:
          type: string
          description: 티켓 제목
        description:
          type: string
          description: 티켓 내용
        status:
          type: string
          description: 티켓 상태
        comments:
          type: array
          description: 댓글 목록
          items:
            $ref: "#/components/schemas/Comment"
  securitySchemes: {}
servers:
  - url: https://tickets-api.codedemo.co
    description: tickets-api.codedemo
security: []
